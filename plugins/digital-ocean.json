{
  "$schema": "https://raw.githubusercontent.com/invoiceradar/plugins/main/schema.json",
  "id": "digital-ocean",
  "name": "DigitalOcean",
  "description": "DigitalOcean is a cloud infrastructure provider.",
  "homepage": "https://www.digitalocean.com",
  "configSchema": {
    "team-id": {
      "type": "string",
      "title": "team ID",
      "required": true,
      "description": "You can find your team ID in the URL. 'cloud.digitalocean.com/projects?i=<team-id>'"
    }
  },
  "checkAuth": [
    {
      "action": "navigate",
      "url": "https://cloud.digitalocean.com/account/billing?i={{config.team-id}}"
    },
    {
      "action": "checkURL",
      "url": "/account/billing?i={{config.team-id}}"
    }
  ],
  "startAuth": [
    {
      "action": "navigate",
      "url": "https://cloud.digitalocean.com/login"
    },
    {
      "action": "waitForURL",
      "url": "/projects",
      "timeout": 120000
    }
  ],
  "getDocuments": [
    {
      "action": "navigate",
      "url": "https://cloud.digitalocean.com/projects?i={{config.team-id}}"
    },
    {
      "action": "runJs",
      "script": "fetch('https://cloud.digitalocean.com/graphql', {\n  method: 'POST',\n  credentials: 'include',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    operationName: 'getMe',\n    variables: {\n      features: [\n        'client_engineering_mod_account_settings',\n        'ui_api_new_nav_label',\n        'paypal_capture',\n        'serverless_standalone_ga',\n        'growth_eng_feature_preview',\n        'paypal_recurring',\n        'client_engineering_ui_marketplace_vp',\n        'client_engineering_sidenav_mp_updates',\n        'ui_paywall_one_page_experiment',\n      ],\n    },\n    query: `\n      query getMe($features: [String]) {\n          getMe {\n            avatar\n          name\n          email\n          nav_message\n          created_at\n          uuid\n          status\n          droplet_limit\n          droplet_count\n          id\n          current_context {\n              ...org\n            __typename\n          }\n          current_context_id\n          current_context_urn\n          default_team_urn\n          usage_total\n          credit\n          credits {\n              credit_type\n            description\n            expiration_date\n            issue_amount\n            remaining_amount\n            __typename\n          }\n          organizations {\n              ...org\n            __typename\n          }\n          has_secure_login\n          team_limit\n          in_bad_standing\n          onboarding_step\n          onboarding_origin\n          is_hold\n          is_trial\n          payment_method\n          authn_type\n          tfa_enabled\n          two_factor_methods {\n              is_primary\n            type\n            phone_number\n            code_count\n            __typename\n          }\n          pending_login_email\n          has_vendor_portal_access\n          teamsv3_enabled\n          is_vendor\n          __typename\n        }\n        sessionData {\n            session_id\n          __typename\n        }\n        AreFeaturesEnabled(BulkFeatureEnabledRequest: {features: $features}) {\n            features {\n              enabled\n            feature {\n                name\n              __typename\n            }\n            __typename\n          }\n          __typename\n        }\n      }\n      \n      fragment org on Organization {\n          id\n        uuid\n        avatar_initials\n        avatar_color\n        name\n        contact_email\n        role\n        status\n        requires_secure_login\n        onboarding_step\n        usage_total\n        in_bad_standing\n        is_hold\n        is_trial\n        is_ach_debit_eligible\n        is_wire_transfer_eligible\n        is_achwire_only\n        payment_method\n        droplet_limit\n        droplet_count\n        pending_email\n        email_verified_at\n        payment_terms\n        __typename\n      }\n    `,\n  }),\n})\n  .then((res) => res.json())\n  .then((res) => {\n    const organization = res.data.getMe.organizations.find((org) =>\n      org.uuid.startsWith('{{config.team-id}}'),\n    )\n\n    return fetch(\n      'https://cloud.digitalocean.com/api/v1/session/switch_context',\n      {\n        method: 'POST',\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n          'x-csrf-token':\n            document.getElementsByTagName('meta')['csrf-token']['content'],\n        },\n        body: JSON.stringify({ context_id: organization.id }),\n      },\n    )\n  })",
      "description": "Switch team"
    },
    {
      "action": "extractAll",
      "script": "fetch('https://cloud.digitalocean.com/graphql', {\n  method: 'POST',\n  credentials: 'include',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    operationName: 'listBillingHistory',\n    variables: { listBillingHistoryRequest: { page: 1, per_page: 100 } },\n    query: `\n      query listBillingHistory(\n        $listBillingHistoryRequest: ListBillingHistoryRequest\n      ) {\n        listBillingHistory(ListBillingHistoryRequest: $listBillingHistoryRequest) {\n          billing_history {\n            description\n            amount\n            invoice_id\n            invoice_uuid\n            date\n            type\n            memo_id\n            receipt_id\n            __typename\n          }\n          meta {\n            total\n            __typename\n          }\n          __typename\n        }\n      }    \n    `,\n  }),\n})\n  .then((res) => res.json())\n  .then((res) =>\n    res.data.listBillingHistory.billing_history.filter(\n      (item) => !!item.invoice_id,\n    ),\n  )\n  .then((items) =>\n    items.map((item) => ({\n      id: item.invoice_id,\n      date: item.date,\n      total: 'USD ' + item.amount,\n      invoice_uuid: item.invoice_uuid,\n    })),\n  )",
      "variable": "item",
      "forEach": [
        {
          "action": "runJs",
          "script": "fetch('https://cloud.digitalocean.com/graphql', {\n  method: 'POST',\n  credentials: 'include',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    operationName: 'getInvoicePDF',\n    variables: {\n      getInvoicePdfRequest: {\n        invoice_uuid: '{{item.invoice_uuid}}',\n      },\n    },\n    query: `\n      query getInvoicePDF($getInvoicePdfRequest: GetInvoicePDFRequest) {\n        getInvoicePDF(GetInvoicePDFRequest: $getInvoicePdfRequest) {\n          content_type\n          filename\n          data\n          __typename\n        }\n      }  \n    `,\n  }),\n})\n  .then((res) => res.json())\n  .then((result) => {\n    async function downloadBase64Pdf(base64Pdf) {\n      // Decode the Base64 string\n      const binaryString = atob(base64Pdf)\n      const len = binaryString.length\n      const bytes = new Uint8Array(len)\n      for (let i = 0; i < len; i++) {\n        bytes[i] = binaryString.charCodeAt(i)\n      }\n\n      // Create a Blob from the binary data\n      const blob = new Blob([bytes], { type: 'application/pdf' })\n\n      // Create a link element\n      const link = document.createElement('a')\n      link.href = window.URL.createObjectURL(blob)\n      link.download = 'downloaded.pdf'\n\n      link.click()\n    }\n\n    downloadBase64Pdf(result.data.getInvoicePDF.data)\n  })"
        },
        {
          "action": "waitForPdfDownload",
          "timeout": 15000,
          "document": {
            "id": "{{item.id}}",
            "date": "{{item.date}}",
            "total": "{{item.total}}"
          }
        }
      ]
    }
  ]
}
